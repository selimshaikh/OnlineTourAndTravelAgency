// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineTourAndTravelAgency.Models;

namespace OnlineTourAndTravelAgency.Migrations
{
    [DbContext(typeof(TourAndTravelDbContext))]
    partial class TourAndTravelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BookingDate");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsCancellation");

                    b.Property<int>("NumberOfAdult");

                    b.Property<int>("NumberOfChild");

                    b.Property<int>("PackageId");

                    b.Property<decimal>("TotalPackagePrice")
                        .HasColumnType("money");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PackageId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Complementary", b =>
                {
                    b.Property<int>("ComplementaryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocalTransportForsightseeing");

                    b.Property<string>("MealDetails")
                        .IsRequired();

                    b.Property<string>("OtherFacility")
                        .IsRequired();

                    b.HasKey("ComplementaryId");

                    b.ToTable("Complementaries");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.ContractUs", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Message");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ContractId");

                    b.ToTable("ContractUs");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.CorporateTourPackage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactPersonMobile")
                        .IsRequired();

                    b.Property<string>("ContractPersonName")
                        .IsRequired();

                    b.Property<DateTime>("DateOfYourJourney");

                    b.Property<string>("DestinationName")
                        .IsRequired();

                    b.Property<string>("Durationoftrip")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<decimal>("EstimatedBudget")
                        .HasColumnType("money");

                    b.Property<string>("NameOfOrganization")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<string>("NumberOfGuests")
                        .IsRequired();

                    b.Property<string>("OfficeAddress")
                        .IsRequired();

                    b.Property<string>("TypeOfBusiness")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("CorporateTourPackages");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<int>("Gender");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Passport")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhotoPath");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Guide", b =>
                {
                    b.Property<int>("GuideId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GuideName")
                        .IsRequired();

                    b.Property<string>("Skill");

                    b.HasKey("GuideId");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<string>("HotelDetails");

                    b.Property<string>("Name");

                    b.HasKey("HotelId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Notes", b =>
                {
                    b.Property<int>("Noteid")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NoteDetails");

                    b.Property<int>("PackagesId");

                    b.HasKey("Noteid");

                    b.HasIndex("PackagesId");

                    b.ToTable("Notess");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Packages", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity");

                    b.Property<int>("ComplementaryId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("GuideId");

                    b.Property<int>("HotelId");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<decimal>("PricePerAdult");

                    b.Property<decimal>("PricePerChild");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TourId");

                    b.Property<int>("TransportId");

                    b.Property<int>("VenueId");

                    b.HasKey("PackageId");

                    b.HasIndex("ComplementaryId");

                    b.HasIndex("GuideId");

                    b.HasIndex("HotelId");

                    b.HasIndex("TourId");

                    b.HasIndex("TransportId");

                    b.HasIndex("VenueId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.PaymentDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BKashNumber")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("BankDetails")
                        .HasMaxLength(200);

                    b.Property<int>("BookingId");

                    b.Property<string>("OtherDetails")
                        .HasMaxLength(200);

                    b.Property<int>("paymentSystem");

                    b.HasKey("ID");

                    b.HasIndex("BookingId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NumberOfPackage");

                    b.Property<string>("TourTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TourId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Transport", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TransportType");

                    b.HasKey("TransportId");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("SpotImage");

                    b.Property<string>("VenueDetails");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Booking", b =>
                {
                    b.HasOne("OnlineTourAndTravelAgency.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineTourAndTravelAgency.Models.Packages", "Packages")
                        .WithMany("Bookings")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Notes", b =>
                {
                    b.HasOne("OnlineTourAndTravelAgency.Models.Packages", "Packages")
                        .WithMany("Notes")
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.Packages", b =>
                {
                    b.HasOne("OnlineTourAndTravelAgency.Models.Complementary", "Complementary")
                        .WithMany("Packages")
                        .HasForeignKey("ComplementaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineTourAndTravelAgency.Models.Guide", "Guide")
                        .WithMany("Packages")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineTourAndTravelAgency.Models.Hotel", "Hotel")
                        .WithMany("Packages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineTourAndTravelAgency.Models.Tour", "Tour")
                        .WithMany("Packages")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineTourAndTravelAgency.Models.Transport", "Transport")
                        .WithMany("Packages")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineTourAndTravelAgency.Models.Venue", "Venue")
                        .WithMany("Packages")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineTourAndTravelAgency.Models.PaymentDetail", b =>
                {
                    b.HasOne("OnlineTourAndTravelAgency.Models.Booking", "Booking")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
